{"version":3,"sources":["components/textarea.js","components/preview.js","App.js","serviceWorker.js","index.js"],"names":["Textarea","props","className","id","value","onChange","handle","Preview","dangerouslySetInnerHTML","__html","marked","defaultText","App","componentDidMount","scriptFcc","document","createElement","src","async","body","appendChild","handleMarked","state","handleTextArea","bind","e","data","target","this","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAWeA,G,YARE,SAACC,GAChB,OACE,yBAAKC,UAAU,wCACb,8BAAUC,GAAG,SAASC,MAAOH,EAAMG,MAAOC,SAAUJ,EAAMK,YCIjDC,EARC,SAACN,GACf,OACE,yBAAKE,GAAG,UAAUD,UAAU,kDAAkDM,wBAAyB,CAACC,OAAQR,EAAMS,W,gBCMpHC,EAAW,m6BA0EFC,E,YAxCb,aAAe,IAAD,8BACZ,+CAOFC,kBAAoB,WAClB,IAAIC,EAAYC,SAASC,cAAc,UACvCF,EAAUG,IAAM,kEAChBH,EAAUI,OAAQ,EAClBH,SAASI,KAAKC,YAAYN,IAZd,EAqBdO,aAAe,WAEb,OADWX,IAAO,EAAKY,MAAMlB,QApB7B,EAAKkB,MAAQ,CACXlB,MAAOO,GAET,EAAKY,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKH,aAAe,EAAKA,aAAaG,KAAlB,gBANR,E,4EAeCC,GACb,IAAIC,EAAOD,EAAEE,OAAOvB,MACpBwB,KAAKC,SAAS,CACZzB,MAAOsB,M,+BAST,OACE,yBAAKxB,UAAU,qBACb,yBAAKA,UAAU,8BACb,wBAAIA,UAAU,MAAd,mCAEA,kBAAC,EAAD,CAAWE,MAAOwB,KAAKN,MAAMlB,MAAOE,OAAQsB,KAAKL,iBACjD,kBAAC,EAAD,CAASb,OAAQkB,KAAKP,uB,GAlCdS,aC/BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.28c8c377.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Textarea = (props) => {\r\n  return (\r\n    <div className='textarea col area col-8 col-lg-5 m-4'>\r\n      <textarea id='editor' value={props.value} onChange={props.handle}/> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Textarea","import React from 'react'\r\n\r\nconst Preview = (props) => {\r\n  return (\r\n    <div id='preview' className='preview area col col-8 col-lg-5 m-4 flex-column' dangerouslySetInnerHTML={{__html: props.marked}}>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preview","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nimport './App.css'\r\n\r\nimport Textarea from './components/textarea'\r\nimport Preview from './components/preview'\r\nimport marked from 'marked'\r\n\r\nconst defaultText = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\\`\\`\\`\r\n// this is multi-line code:\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\nThere's also [links](https://github.com/buugaaga), and\r\n > Block Quotes!\r\n\r\n**And of course there are lists:**\r\n  - Some are bulleted.\r\n  - With different indentation levels.\r\n  - That look like this.\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      value: defaultText\r\n    }\r\n    this.handleTextArea = this.handleTextArea.bind(this)\r\n    this.handleMarked = this.handleMarked.bind(this)\r\n  }\r\n  componentDidMount = () => {\r\n    let scriptFcc = document.createElement('script')\r\n    scriptFcc.src = 'https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js'\r\n    scriptFcc.async = true\r\n    document.body.appendChild(scriptFcc)\r\n  }\r\n\r\n  handleTextArea(e) {\r\n    let data = e.target.value\r\n    this.setState({\r\n      value: data\r\n    })\r\n  }\r\n  handleMarked = () => {\r\n    let html = marked(this.state.value)\r\n    return html\r\n  }\r\n  render() {\r\n    \r\n    return (\r\n      <div className='wrapper container'>\r\n        <div className='row justify-content-around'>\r\n          <h1 className='h1'>Markdown preview from Eldar :))</h1>\r\n          \r\n          <Textarea  value={this.state.value} handle={this.handleTextArea} />\r\n          <Preview marked={this.handleMarked()}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}